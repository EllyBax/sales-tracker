<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="widtd=device-widtd, initial-scale=1.0" />
  <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
  <title>Sales</title>
  <style>
    @import url("https://fonts.cdnfonts.com/css/poppins");

    @media (prefers-color-scheme: dark) {
      :root {
        --main-bg: #161616;
        --second-bg: #1a1a1a;
        --third-bg: #262626;
        --clear-bg: #161616be;
        --main-text: #ffffff;
        --second-text: #e1e4e8;
        --warning-bg: #f44336;
        --success-bg: #064f11;
        --primary-bg: #3936f4;
      }
    }

    @media (prefers-color-scheme: light) {
      :root {
        --main-bg: #ffffff;
        --second-bg: #f2f2f2;
        --third-bg: #e9e9e9;
        --clear-bg: #ffffffbe;
        --main-text: #111111;
        --second-text: #333333;
        --warning-bg: #f44336;
        --success-bg: #064f11;
        --primary-bg: #3936f4;
      }
    }

    .light {
      --main-bg: #ffffff;
      --second-bg: #f2f2f2;
      --third-bg: #e9e9e9;
      --clear-bg: #ffffffbe;
      --main-text: #111111;
      --second-text: #333333;
      --warning-bg: #f44336;
      --success-bg: #064f11;
      --primary-bg: #3936f4;
    }

    .dark {
      --main-bg: #161616;
      --second-bg: #1a1a1a;
      --third-bg: #262626;
      --clear-bg: #161616be;
      --main-text: #ffffff;
      --second-text: #e1e4e8;
      --warning-bg: #f44336;
      --success-bg: #064f11;
      --primary-bg: #3936f4;
    }

    html {
      overflow-x: hidden;
    }

    body {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      background: var(--second-bg);
      font-family: "Poppins", sans-serif;
      width: 100vw;
      color: var(--main-text);
    }

    header {
      position: fixed;
      width: calc(100% - 3rem);
      justify-content: space-between;
      align-items: center;
      display: flex;
      top: 0;
      box-shadow: 0 0 4px var(--third-bg);
      background: var(--clear-bg);
      padding: 0 1.5rem;
      backdrop-filter: blur(3px);
      transition: all 1s ease;
      z-index: 1000;
    }

    .user {
      background: var(--main-bg);
      padding: 0 1rem;
      margin: 5px auto;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .user button {
      all: unset;
      padding: .3rem .5rem;
      background: var(--third-bg);
      border-radius: 8px;
      cursor: pointer;
      transition: all .5s ease-in-out;
    }

    .user button:hover {
      background-color: var(--second-bg);
    }

    .themes {
      position: relative;
      height: max-content;
      width: max-content;
    }

    .toggleThemes {
      all: unset;
      border: 2px solid var(--third-bg);
      color: var(--main-text);
      padding: 0.5rem;
      border-radius: 8px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: space-between;
      transition: all 1s ease-in-out;
    }

    .toggleThemes:hover {
      background-color: var(--second-text);
      color: var(--second-bg);
    }

    .icon {
      font-size: 1.5rem;
    }

    .themeCategories {
      position: absolute;
      min-width: 4rem;
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1;
      background: var(--third-bg);
      padding: 0.3rem 1rem;
      right: 0;
    }

    .ThemeIcon {
      display: block;
      all: unset;
      padding: 0.4rem;
      border: 2px solid var(--main-text);
      width: calc(100% - 0.8rem);
      border-radius: 5px;
      font-family: monospace;
      display: flex;
      align-items: center;
      justify-content: space-between;
      cursor: pointer;
      transition: all 1s ease-in-out;
    }

    .ThemeIcon:hover {
      background-color: var(--second-text);
      color: var(--second-bg);
    }

    main {
      padding: 0 1rem 1rem 1rem;
      height: max-content;
    }

    #heroText {
      color: var(--second-text);
      text-align: center;
    }

    .errDiv {
      margin: 0;
      padding: 0.4rem;
      background-color: var(--warning-bg);
      text-align: center;
      max-width: 70%;
      border-radius: 4px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      bottom: 1rem;
      left: 1rem;
    }

    .successDiv {
      margin: 0;
      padding: 0.4rem;
      background-color: var(--success-bg);
      text-align: center;
      max-width: 70%;
      border-radius: 4px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      bottom: 1rem;
      right: 1rem;
      /* Changed from left to right */
    }

    table {
      background: var(--second-bg);
      width: 50vw;
      margin: 0 auto;
      box-shadow: 0 0 2px;
      color: var(--main-text);
    }

    th,
    td {
      border: 2px solid transparent;
      padding: 0 1rem;
    }

    th {
      transition: all 0.4s ease;
      background: var(--second-bg);
    }

    td {
      background: var(--third-bg);
      transition: all 0.5s ease-in-out;
    }

    td:hover,
    th:hover {
      background: var(--second-text);
      cursor: pointer;
      color: var(--main-bg);
    }

    .tableFill {
      color: var(--main-text);
      background: var(--main-bg);
      padding: 1rem;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: space-evenly;
      width: max-content;
      margin: 1rem auto;
      transition: all 1s 0.3s ease;
    }

    .tableFill input,
    .deleteMessage input {
      all: unset;
      background: var(--second-bg);
      border: 2px solid var(--main-bg);
      max-width: 20%;
      height: 1.5rem;
      border-radius: 10px;
      padding: 0.5rem;
    }

    .tableFill input[type="number"]::-webkit-inner-spin-button,
    .tableFill input[type="number"]::-webkit-outer-spin-button,
    #entryId::-webkit-inner-spin-button,
    #entryId::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    input[type="number"],
    #entryId {
      -moz-appearance: textfield;
    }

    .tableFill button {
      all: unset;
      border: 2px solid var(--third-bg);
      background: var(--primary-bg);
      color: var(--main-text);
      height: fit-content;
      padding: 0.25rem 0.5rem;
      border-radius: 8px;
      width: 10%;
      text-align: center;
      cursor: pointer;
      transition: all 0.5s ease-in-out;
    }

    .tableFill button:hover {
      box-shadow: 0 0 3px;
      transform: scale(1);
    }

    .deleteEntry {
      all: unset;
      background-color: var(--warning-bg);
      padding: 0.5rem;
      border-radius: 5px;
      cursor: pointer;
    }

    .history {
      all: unset;
      background-color: #064f11;
      padding: 0.5rem;
      border-radius: 5px;
      cursor: pointer;
    }

    .addEntry {
      all: unset;
      background-color: #3936f4;
      padding: 0.5rem;
      border-radius: 5px;
      cursor: pointer;
    }

    #entryChoice {
      all: unset;
      background-color: var(--warning-bg);
      padding: 0.4rem;
      border-radius: 5px;
      cursor: pointer;
    }

    .deleteMessage {
      margin: 1rem auto;
      border-radius: 5px;
      padding: 2rem;
      color: var(--main-text);
      background: var(--main-bg);
      width: 70%;
      display: flex;
      align-items: center;
      justify-content: space-between;
      position: relative;
    }

    #entryId {
      background: var(--third-bg);
      border-radius: 7px;
      width: 20%;
    }

    .closeButton {
      position: absolute;
      color: var(--main-text);
      top: 10px;
      right: 10px;
      background: none;
      border: none;
      font-size: 25px;
      cursor: pointer;
      transition: all 0.5s cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }

    .closeButton:hover {
      color: red;
    }

    .actions {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background: var(--main-bg);
      color: var(--main-text);
      width: 80vw;
      padding: 2rem;
      border-radius: 10px;
      transition: all 1s ease;
      margin: 2rem auto;
    }

    .fabButton {
      position: fixed;
      right: 20px;
      background-color: var(--second-text);
      color: var(--main-bg);
      border: none;
      border-radius: 10px;
      width: 50px;
      height: 50px;
      font-size: 24px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      cursor: pointer;
      z-index: 3000;
      transition: all 1s ease-in-out;
    }

    .fabButton:hover {
      color: var(--second-text);
      background-color: var(--main-bg);
    }

    footer {
      position: fixed;
      left: 0;
      bottom: 0;
      width: 100%;
      padding: 0.5rem;
      background: var(--main-bg);
      display: grid;
      place-items: center;
      z-index: 1000;
    }

    /* Styling for mobile screens */
    @media (max-width: 768px) {

      .deleteMessage,
      .tableFill,
      .actions {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        gap: 1rem;
        padding: 0.5rem;
      }

      .deleteMessage {
        padding: 1rem;
      }

      .deleteMessage input,
      .tableFill input {
        max-width: calc(100% - 2rem);
      }

      #entryId {
        width: calc(100% - 2rem);
      }

      table {
        width: 80vw;
        margin: 0 auto;
      }

      th,
      td {
        border: 2px solid transparent;
        padding: 0 0.2rem;
      }

      .actions button,
      .tableFill button {
        width: 50%;
        margin: 0.2rem auto;
      }
    }
  </style>
</head>

<body>
  <header id="header">
    <h1>MAUZO</h1>
    <div class="themes">
      <button class="toggleThemes">
        <i class="bx bx-adjust icon"></i>
        <i class="bx bx-chevron-down icon" id="chevyDown"></i>
        <i class="bx bx-chevron-up icon" id="chevyUp"></i>
      </button>
      <div class="themeCategories">
        <button class="ThemeIcon" id="auto"><i class='bx bx-desktop'></i>Auto</button>
        <hr>
        <button class="ThemeIcon" id="light"><i class='bx bx-sun'></i> Light</button>
        <hr>
        <button class="ThemeIcon" id="dark"><i class='bx bx-moon'></i> Dark</button>
      </div>
    </div>

  </header>

  <main id="main">
    <form class="user" method="post" action="/logout">
      <h4>Welcome, <%= username%>
      </h4>
      <button type="submit" id="logoutButton">LOGOUT</button>
    </form>
    <h1 id="heroText">
      Sales Records for April
    </h1>
    <table id="table">
      <tr>
        <th>Entry</th>
        <th>Name</th>
        <th>Total</th>
        <th>Amount</th>
      </tr>
      <% for (let sale of sales) { %>
        <tr>
          <td>
            <%= sale.id %>
          </td>
          <td>
            <%= sale.item %>
          </td>
          <td>
            <%= sale.total %>
          </td>
          <td>
            <%= sale.amount %>
          </td>
        </tr>
        <% } %>
    </table>

    <form class="deleteMessage" id="deleteMessage" method="post" action="/delete">
      <label for="entryId">Enter entry to Delete:</label>
      <input type="number" placeholder="Number" id="entryId" name="entryId" />
      <button type="submit" id="deleteEntry" class="deleteEntry">Delete</button>
      <button type="button" id="closeButton" class="closeButton">
        &times;
      </button>
    </form>

    <form id="tableFill" class="tableFill" method="post" action="/addEntry">
      <input type="text" placeholder="bidhaa" id="item" name="item" />
      <input type="number" placeholder="idadi" id="total" name="total" />
      <input type="number" placeholder="kiasi" id="amount" name="amount" />
      <input type="date" max="<%= new Date().toISOString().split('T')[0] %>" name="date" id="date" />
      <button type="submit" id="addSale">Record</button>
    </form>

    <div class="actions">
      <button type="submit" id="addEntry" class="addEntry">Add Entry</button>
      <button type="submit" id="delEntry" class="deleteEntry">
        Delete Entry
      </button>
      <button type="submit" id="history" class="history">
        History
      </button>
    </div>
  </main>
  <button id="fabButton" class="fabButton">
    <i class='bx bx-book-add'></i>
    <i class='bx bx-x'></i>
  </button>

  <footer>2024&copy; Bax Lly</footer>

  <script>
    //necesssary constant declarations
    const main = document.getElementById("main");
    const header = document.getElementById("header");
    const heroText = document.getElementById("heroText");
    const entryForm = document.getElementById("tableFill");
    const amount = document.getElementById("amount");
    const total = document.getElementById("total");
    const item = document.getElementById("item");
    const addEntry = document.getElementById("addEntry");
    const deleteMessage = document.getElementById("deleteMessage");
    const entryId = document.getElementById("entryId");
    const entryChoice = document.getElementById("entryChoice");
    const delEntry = document.getElementById("delEntry");
    const addSale = document.getElementById("addSale");
    const light = document.getElementById("light");
    const dark = document.getElementById("dark");
    const auto = document.getElementById("auto");
    const historyButton = document.getElementById("history");
    const currentDate = new Date();


    historyButton.addEventListener('click', () => {
      window.location.assign('/date')
    })

    document.getElementById("logoutButton").addEventListener("click", function () {
      // Clear user-specific data from local storage
      localStorage.removeItem("userId");
      localStorage.removeItem("username");
      // Redirect to the logout route
      window.location.href = "/logout";
    });
    /*
        document.addEventListener("DOMContentLoaded", async function () {
          const response = await fetch("/sales");
          const sales = await response.json();
          // console.log(sales);
    
          const table = document.getElementById("table");
          for (const sale of sales) {
            const row = document.createElement("tr");
            const idCell = document.createElement("td");
            idCell.textContent = sale.id;
            row.appendChild(idCell);
            const itemCell = document.createElement("td");
            itemCell.textContent = sale.item;
            row.appendChild(itemCell);
            const totalCell = document.createElement("td");
            totalCell.textContent = sale.total;
            row.appendChild(totalCell);
            const amountCell = document.createElement("td");
            amountCell.textContent = sale.amount;
            row.appendChild(amountCell);
            table.appendChild(row);
          }
        });*/

    /*
    document.addEventListener('DOMContentLoaded', function () {
        const urlParams = new URLSearchParams(window.location.search);
        const submission = urlParams.get('submission');
        if (submission === 'success') {
          document.getElementById('entryForm').reset();
        } else if (submission === 'error') {
          // Handle error
          console.error('Form submission failed');
        }
      });*/

    //top margin due to fixed header
    document.addEventListener("DOMContentLoaded", () => {
      let footerHeight = document.querySelector("footer").scrollHeight;
      let headerHeight = header.scrollHeight;
      main.style.marginBottom = `${footerHeight + 8}px`;
      main.style.marginTop = `${headerHeight + 16}px`;
    });

    //get formatted date
    function formatDate(date) {
      const day = String(date.getDate()).padStart(2, "0");
      const month = String(date.getMonth() + 1).padStart(2, "0"); // Months are 0-based in JavaScript
      const year = date.getFullYear();

      return `${day}/${month}/${year}`;
    }

    // display date in heroText
    // heroText.innerText = `Sales Records for ${formatDate(currentDate)}`;

    // Initial state of deleteMessage
    deleteMessage.style.display = "none";

    //initial state of form
    entryForm.style.display = "none";


    //close form when prompted
    document.getElementById("closeButton").addEventListener("click", function () {
      document.getElementById("deleteMessage").style.display = "none";
    });

    //theme toggle

    var themeCategories = document.querySelector(".themeCategories");
    var chevyUp = document.getElementById("chevyUp");
    var chevyDown = document.getElementById("chevyDown");

    // Initially hide themeCategories and set chevron icons
    chevyDown.style.display = "block";
    chevyUp.style.display = "none";
    themeCategories.style.display = "none";
    document.querySelector(".toggleThemes").addEventListener("click", function () {
      // Toggle themeCategories visibility
      if (themeCategories.style.display === "none") {
        themeCategories.style.display = "block";
        chevyDown.style.display = "none";
        chevyUp.style.display = "block";
      } else {
        themeCategories.style.display = "none";
        chevyDown.style.display = "block";
        chevyUp.style.display = "none";
      }
    });

    light.addEventListener("click", () => {
      // remove/hide themeCategories and set chevron icons
      chevyDown.style.display = "block";
      chevyUp.style.display = "none";
      themeCategories.style.display = "none";
      changeTheme("light");
    });
    dark.addEventListener("click", () => {
      // remove/hide themeCategories and set chevron icons
      chevyDown.style.display = "block";
      chevyUp.style.display = "none";
      themeCategories.style.display = "none";
      changeTheme("dark");
    });
    auto.addEventListener("click", () => {
      // remove/hide themeCategories and set chevron icons
      chevyDown.style.display = "block";
      chevyUp.style.display = "none";
      themeCategories.style.display = "none";
      changeTheme("");
    });

    function changeTheme(theme) {
      document.querySelector("html").classList = theme;
    }

    document.addEventListener("DOMContentLoaded", function () {
      const fabButton = document.getElementById("fabButton");
      const bookAddIcon = fabButton.querySelector(".bx-book-add");
      const xIcon = fabButton.querySelector(".bx-x");
      const actionsDiv = document.querySelector(".actions");
      // Initial state of actions div and fab button
      actionsDiv.style.display = "none";
      bookAddIcon.style.display = "inline-block"; // Show book-add icon
      xIcon.style.display = "none"; // Hide 'x' icon

      // Function to toggle the display of the actions div and switch icons
      function toggleActionsDiv() {
        entryForm.style.display = "none";
        deleteMessage.style.display = "none";
        if (actionsDiv.style.display === "none") {
          actionsDiv.style.transition = "opacity 0.5s ease";
          actionsDiv.style.opacity = "1";
          actionsDiv.style.display = "flex";
          bookAddIcon.style.display = "none"; // Hide book-add icon
          xIcon.style.display = "inline-block"; // Show 'x' icon
          actionsDiv.scrollIntoView({ behavior: "smooth" }); // Scroll actionsDiv into view smoothly
        } else {
          // Hide actionsDiv smoothly
          actionsDiv.style.transition = "opacity 0.5s ease";
          actionsDiv.style.opacity = "0";

          // Hide icons after the transition
          setTimeout(() => {
            actionsDiv.style.display = "none";
            bookAddIcon.style.display = "inline-block"; // Show book-add icon
            xIcon.style.display = "none"; // Hide 'x' icon
          }, 500);
        }
      }

      let footerHeight = document.querySelector("footer").scrollHeight;
      fabButton.style.bottom = `${footerHeight + 5}px`;

      // Attach the toggle function to the click event of the fabButton
      fabButton.addEventListener("click", toggleActionsDiv);

      function fetchEntryToDelete() {
        if (entryForm.style.display === "flex") {
          entryForm.style.display = "none";
        }
        deleteMessage.style.display = "flex";
        deleteMessage.style.opacity = "1";
      }

      delEntry.addEventListener('click', (event) => {
        event.preventDefault()
        fetchEntryToDelete();
      })
    });

    document.getElementById('deleteEntry').addEventListener('click', (e) => {
      e.preventDefault();
      getEntry();
    });

    function getEntry() {
      if (!entryId.value) {
        displayError('Err: "Can\'t delete empty entry"', main);
      } else {
        setTimeout(() => {
          document.getElementById("deleteMessage").submit();
          displaySuccess('Success: "Entry deleted!"')
        }, 1000);
      }
    }

    function displayError(errorMessage, parentElement) {
      const errDiv = document.createElement("div");
      errDiv.innerHTML = `
    <div class="errDiv">
      <h4>${errorMessage}</h4>
    </div>`;
      parentElement.appendChild(errDiv); // Append errDiv to the parentElement first
      errDiv.scrollIntoView({ behavior: "smooth" }); // Now scrollIntoView will work

      setTimeout(() => {
        errDiv.style.opacity = "0";
        errDiv.style.transition = "all 1s ease-in-out";
        setTimeout(() => {
          errDiv.remove();
        }, 1000);
      }, 2000);
    }

    //call form
    addEntry.addEventListener("click", (event) => {
      event.preventDefault();
      if (deleteMessage.style.display === "flex") {
        deleteMessage.style.display = "none";
        entryForm.style.display = "flex";
      } else {
        entryForm.style.display = "flex";
        entryForm.style.opacity = "1";
      }
    });

    //form submission
    addSale.addEventListener("click", (event) => {
      fillTable(event);
    });

    function fillTable(event) {
      event.preventDefault();
      // Trim the input values to remove leading/trailing whitespace
      const totalValue = total.value.trim();
      const itemValue = item.value.trim();
      const amountValue = amount.value.trim();
      const sale_date = document.getElementById('date')

      // Check if any of the inputs are empty
      if (!totalValue || !itemValue || !amountValue || !sale_date) {
        displayError('Err: "Fill all fields"', main);
        // entryForm.style.display = "none";
      } else {
        // form submission
        setTimeout(() => {
          document.getElementById('tableFill').submit();
          displaySuccess('Succes: Data submitted!', main)
        }, 1000);
      }
    }

    function displaySuccess(successMessage, parentElement) {
      const successDiv = document.createElement("div");
      successDiv.innerHTML = `
    <div class="successDiv">
      <h4>${successMessage}</h4>
    </div>`;
      parentElement.appendChild(successDiv); // Append successDiv to the parentElement first
      successDiv.scrollIntoView({ behavior: "smooth" }); // Now scrollIntoView will work

      setTimeout(() => {
        successDiv.style.opacity = "0";
        successDiv.style.transition = "all 1s ease-in-out";
        setTimeout(() => {
          successDiv.remove();
        }, 1000);
      }, 2000);
    }
  </script>
</body>

</html>